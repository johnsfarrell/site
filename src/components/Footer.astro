---
import child_process from 'child_process'
import { GITHUB_REPO } from '../consts'

const filepath = Astro.props.filepath ?? ''

async function execShellCommand(cmd: string): Promise<string> {
    return new Promise((resolve, reject) => {
        child_process.exec(cmd, (error, stdout) => {
            if (error) {
                reject(error);
            } else {
                resolve(stdout.trim());
            }
        });
    });
}

async function getGitFooterData(filepath: string) {
    if (import.meta.env.MODE !== 'production') return null;

    const relativeFilePath = await execShellCommand(`git ls-files --full-name ${filepath}`);
    const [longHash, shortHash, lastModEpoch] = await Promise.all([
        execShellCommand(`git log -n 1 --pretty=format:%H  -- ${relativeFilePath}`),
        execShellCommand(`git log -n 1 --pretty=format:%h  -- ${relativeFilePath}`),
        execShellCommand(`git log -n 1 --pretty=format:%ct -- ${relativeFilePath}`)
    ]);
    const lastMod = new Date(parseInt(lastModEpoch) * 1000).toLocaleDateString('en-GB', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        timeZone: 'America/New_York',
    });
    const gitCommand = `git log -n 1 -- ${relativeFilePath}`;
    const repoLink = `https://github.com/${GITHUB_REPO}/${relativeFilePath ? 'blob' : 'tree'}/${longHash}/${relativeFilePath}`;

    const runId = import.meta.env.GITHUB_RUN_ID;

    const runNumber = import.meta.env.GITHUB_RUN_NUMBER;

    const runLink = `https://github.com/${GITHUB_REPO}/actions/runs/${runId}`;

    const deployDate = new Date().toLocaleDateString('en-GB', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        timeZone: 'America/New_York',
        hour: 'numeric',
        minute: 'numeric',
        hour12: true,
    });

    return { relativeFilePath, gitCommand, longHash, shortHash, lastMod, repoLink, runLink, runNumber, deployDate };
}

const footerData = await getGitFooterData(filepath).catch(() => null);
---

<footer data-nosnippet>{footerData ?
    <div id="loading">
        {footerData.gitCommand}
    </div>
    <div id="loaded">
        last updated
        <a href={footerData.repoLink} target="_blank">@{footerData.shortHash}</a>
        on {footerData.lastMod} &#60;3
    </div>
    <div class="hover-reveal no-hover">
        last deployed 
        <a href={footerData.runLink} target="_blank">#{footerData.runNumber}</a>
        on {footerData.deployDate}
    </div>
    : <>&#60;3</>}
</footer>

<script>
    setTimeout(() => {
        document.querySelector('.hover-reveal')?.classList.remove('no-hover');
    }, 1800);
</script>

<style>
    html a {
        color: rgba(0, 0, 0, 0.50);
    }
    html a:hover {
        color: rgba(0, 0, 0, 0.66);
    }
    html footer {
        font-size: smaller;
        color: rgba(0, 0, 0, 0.33);
        position: relative;
        margin-top: 1em;
    }

    #loading, #loaded {
        position: absolute;
        top: 1em;
    }
    #loading {
        animation: loading 0.5s 1.5s forwards;
    }
    #loaded {
        opacity: 0;
        transform: rotateX(-90deg) translateY(25px);
        animation: loaded 0.5s 1.5s forwards;
        transition: top 0.1s ease-in-out;
    }

    .hover-reveal {
        transition: all 0.2s ease;
        opacity: 0;
        scale: 0.85;
    }
    
    footer:hover .hover-reveal:not(.no-hover) {
        opacity: 1;
        scale: 1;
    }
    footer:hover #loaded{
        top: 0em;
    }

    @keyframes loading {
        to { opacity: 0; transform: rotateX(-75deg) translateY(-50px); }
    }
    @keyframes loaded {
        to { opacity: 1; transform: rotateX(0) translateY(0px); }
    }
</style>
